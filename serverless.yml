service: serverless-dynamo-basic-operations

plugins:
  - serverless-dynamodb-local

custom:
  myStage: ${opt:stage, self:provider.stage}
  dynamodb:
    dev:
      ENTITIES_DYNAMODB_TABLE: MoD-entities-dev
    start:
      sharedDb: true
      # migrate: true
      # seed: true
    seed:
      mainTables:
        sources:
          - table: entities
            sources: [./DiscordBot/schemas/entities.json]
          - table: items
            sources: [./DiscordBot/schemas/items.json]
          - table: rooms
            sources: [./DiscordBot/schemas/rooms.json]
          - table: players
            sources: [./DiscordBot/schemas/players.json]
          

provider:
  name: aws
  runtime: nodejs6.10
  profile: default
  region: us-east-1
  environment: ${self:custom.dynamodb.${self:custom.myStage}}

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "dynamodb:GetItem"
        - "dynamodb:PutItem"
        - "dynamodb:UpdateItem"
        - "dynamodb:DeleteItem"
      Resource:
        - "arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.dynamodb.${self:custom.myStage}.ENTITIES_DYNAMODB_TABLE}"

functions:
  saveItem:
    handler: handler.saveItem
    events:
      - http:
          path: item
          method: post
  getItem:
    handler: handler.getItem
    events:
      - http:
          path: item/{itemId}
          method: get
  deleteItem:
    handler: handler.deleteItem
    events:
        - http:
            path: item/{itemId}
            method: delete
  updateItem:
    handler: handler.updateItem
    events:
      - http:
          path: item/{itemId}
          method: put

resources:
  Resources:
    MudTestTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        AttributeDefinitions:
        - AttributeName: "itemId"
          AttributeType: "S"
        KeySchema:
        - AttributeName: "itemId"
          KeyType: "HASH"
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:custom.dynamodb.${self:custom.myStage}.ENTITIES_DYNAMODB_TABLE}
    EntityTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: entities
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    itemTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: items
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    roomTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: rooms
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    playerTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: players
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
